// netlify/functions/google-sheets-integration.js

const { google } = require('googleapis');

// Google Sheets configuration
const SPREADSHEET_CONFIG = {
  // This will be your master tracking spreadsheet ID
  SPREADSHEET_ID: process.env.GOOGLE_SHEET_ID || 'YOUR_SPREADSHEET_ID_HERE',
  
  // Sheet names within the spreadsheet
  SHEETS: {
    CASES: 'Active Cases',
    DEADLINES: 'Deadlines',
    DOCUMENTS: 'Documents Generated',
    BENEFICIARIES: 'Beneficiaries',
    PROPERTIES: 'Properties',
    DISTRIBUTIONS: 'Distributions',
    ARCHIVE: 'Archived Cases'
  },
  
  // Column mappings for Cases sheet
  CASE_COLUMNS: {
    A: 'Case Number',
    B: 'Date Created',
    C: 'Decedent Name',
    D: 'Death Date',
    E: 'Trust Name',
    F: 'Trust Date',
    G: 'Trustee Name',
    H: 'Trustee Phone',
    I: 'Trustee Email',
    J: 'Estate Value',
    K: 'Status',
    L: '60-Day Deadline',
    M: 'Contest Deadline',
    N: 'Creditor Deadline',
    O: 'Tax Deadline',
    P: 'Property Address',
    Q: 'APN',
    R: 'Beneficiary Count',
    S: 'Distribution Status',
    T: 'Notes',
    U: 'Drive Folder Link',
    V: 'Last Updated'
  },
  
  // Column mappings for Deadlines sheet
  DEADLINE_COLUMNS: {
    A: 'Case Number',
    B: 'Deadline Type',
    C: 'Due Date',
    D: 'Days Remaining',
    E: 'Status',
    F: 'Completed Date',
    G: 'Notes'
  },
  
  // Column mappings for Documents sheet
  DOCUMENT_COLUMNS: {
    A: 'Case Number',
    B: 'Document Type',
    C: 'Date Generated',
    D: 'Generated By',
    E: 'Drive Link',
    F: 'Status',
    G: 'Sent Date',
    H: 'Recipient'
  }
};

// Initialize Google Sheets API
async function initializeGoogleSheets() {
  try {
    // Use service account for authentication
    const auth = new google.auth.GoogleAuth({
      credentials: {
        client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        private_key: process.env.GOOGLE_SERVICE_ACCOUNT_KEY.replace(/\\n/g, '\n')
      },
      scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'
      ]
    });
    
    const sheets = google.sheets({ version: 'v4', auth });
    return sheets;
  } catch (error) {
    console.error('Error initializing Google Sheets:', error);
    throw error;
  }
}

// Create a new case in Google Sheets
async function createCaseInSheets(caseData) {
  const sheets = await initializeGoogleSheets();
  
  // Calculate deadlines
  const deadlines = calculateDeadlines(caseData.death_date);
  
  // Prepare row data
  const rowData = [
    caseData.case_number,
    new Date().toLocaleDateString(),
    caseData.decedent_full_name,
    formatDate(caseData.death_date),
    caseData.trust_name,
    formatDate(caseData.trust_date),
    caseData.trustee_name,
    caseData.trustee_phone || '',
    caseData.trustee_email || '',
    caseData.estate_value || '',
    'Active',
    deadlines.sixty_day_notice,
    deadlines.contest_deadline,
    deadlines.creditor_claims,
    deadlines.estate_tax_706,
    caseData.property_address || '',
    caseData.apn || '',
    caseData.beneficiaries ? caseData.beneficiaries.length : 0,
    'Pending',
    caseData.initial_notes || '',
    '', // Drive folder link will be updated later
    new Date().toISOString()
  ];
  
  try {
    // Append the new case to the Cases sheet
    const response = await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_CONFIG.SPREADSHEET_ID,
      range: `${SPREADSHEET_CONFIG.SHEETS.CASES}!A:V`,
      valueInputOption: 'USER_ENTERED',
      requestBody: {
        values: [rowData]
      }
    });
    
    // Also create deadline entries
    await createDeadlineEntries(sheets, caseData.case_number, deadlines);
    
    return {
      success: true,
      range: response.data.updates.updatedRange,
      case_number: caseData.case_number
    };
  } catch (error) {
    console.error('Error creating case in Sheets:', error);
    throw error;
  }
}

// Create deadline entries for a case
async function createDeadlineEntries(sheets, caseNumber, deadlines) {
  const deadlineRows = [
    [caseNumber, '60-Day Notice', deadlines.sixty_day_notice, calculateDaysRemaining(deadlines.sixty_day_notice), 'Pending', '', ''],
    [caseNumber, 'Contest Period', deadlines.contest_deadline, calculateDaysRemaining(deadlines.contest_deadline), 'Pending', '', ''],
    [caseNumber, 'Creditor Claims', deadlines.creditor_claims, calculateDaysRemaining(deadlines.creditor_claims), 'Pending', '', ''],
    [caseNumber, 'Estate Tax (706)', deadlines.estate_tax_706, calculateDaysRemaining(deadlines.estate_tax_706), 'Pending', '', ''],
    [caseNumber, 'Final Income Tax', deadlines.final_income_tax, calculateDaysRemaining(deadlines.final_income_tax), 'Pending', '', '']
  ];
  
  await sheets.spreadsheets.values.append({
    spreadsheetId: SPREADSHEET_CONFIG.SPREADSHEET_ID,
    range: `${SPREADSHEET_CONFIG.SHEETS.DEADLINES}!A:G`,
    valueInputOption: 'USER_ENTERED',
    requestBody: {
      values: deadlineRows
    }
  });
}

// Update case status
async function updateCaseStatus(caseNumber, status, notes) {
  const sheets = await initializeGoogleSheets();
  
  try {
    // Find the case row
    const searchResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_CONFIG.SPREADSHEET_ID,
      range: `${SPREADSHEET_CONFIG.SHEETS.CASES}!A:A`
    });
    
    const values = searchResponse.data.values || [];
    let rowIndex = -1;
    
    for (let i = 0; i < values.length; i++) {
      if (values[i][0] === caseNumber) {
        rowIndex = i + 1; // Sheets uses 1-based indexing
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Case ${caseNumber} not found`);
    }
    
    // Update status and last updated
    const updates = [
      {
        range: `${SPREADSHEET_CONFIG.SHEETS.CASES}!K${rowIndex}`,
        values: [[status]]
      },
      {
        range: `${SPREADSHEET_CONFIG.SHEETS.CASES}!V${rowIndex}`,
        values: [[new Date().toISOString()]]
      }
    ];
    
    if (notes) {
      updates.push({
        range: `${SPREADSHEET_CONFIG.SHEETS.CASES}!T${rowIndex}`,
        values: [[notes]]
      });
    }
    
    await sheets.spreadsheets.values.batchUpdate({
      spreadsheetId: SPREADSHEET_CONFIG.SPREADSHEET_ID,
      requestBody: {
        data: updates,
        valueInputOption: 'USER_ENTERED'
      }
    });
    
    return { success: true, case_number: caseNumber, status: status };
  } catch (error) {
    console.error('Error updating case status:', error);
    throw error;
  }
}

// Record document generation
async function recordDocumentGeneration(caseNumber, documentType, driveLink) {
  const sheets = await initializeGoogleSheets();
  
  const rowData = [
    caseNumber,
    documentType,
    new Date().toLocaleString(),
    'System', // Or pass in user name
    driveLink || '',
    'Generated',
    '',
    ''
  ];
  
  try {
    await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_CONFIG.SPREADSHEET_ID,
      range: `${SPREADSHEET_CONFIG.SHEETS.DOCUMENTS}!A:H`,
      valueInputOption: 'USER_ENTERED',
      requestBody: {
        values: [rowData]
      }
    });
    
    return { success: true };
  } catch (error) {
    console.error('Error recording document generation:', error);
    throw error;
  }
}

// Get case data from Sheets
async function getCaseData(caseNumber) {
  const sheets = await initializeGoogleSheets();
  
  try {
    // Get all cases
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_CONFIG.SPREADSHEET_ID,
      range: `${SPREADSHEET_CONFIG.SHEETS.CASES}!A:V`
    });
    
    const rows = response.data.values || [];
    const headers = rows[0];
    
    // Find the case
    for (let i = 1; i < rows.length; i++) {
      if (rows[i][0] === caseNumber) {
        // Convert row to object
        const caseData = {};
        headers.forEach((header, index) => {
          caseData[header.toLowerCase().replace(/ /g, '_')] = rows[i][index] || '';
        });
        return caseData;
      }
    }
    
    throw new Error(`Case ${caseNumber} not found`);
  } catch (error) {
    console.error('Error getting case data:', error);
    throw error;
  }
}

// Get all active cases
async function getActiveCases() {
  const sheets = await initializeGoogleSheets();
  
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_CONFIG.SPREADSHEET_ID,
      range: `${SPREADSHEET_CONFIG.SHEETS.CASES}!A:V`
    });
    
    const rows = response.data.values || [];
    if (rows.length < 2) return [];
    
    const headers = rows[0];
    const cases = [];
    
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      if (row[10] === 'Active') { // Status column
        const caseData = {};
        headers.forEach((header, index) => {
          caseData[header.toLowerCase().replace(/ /g, '_')] = row[index] || '';
        });
        cases.push(caseData);
      }
    }
    
    return cases;
  } catch (error) {
    console.error('Error getting active cases:', error);
    throw error;
  }
}

// Get upcoming deadlines
async function getUpcomingDeadlines(daysAhead = 30) {
  const sheets = await initializeGoogleSheets();
  
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_CONFIG.SPREADSHEET_ID,
      range: `${SPREADSHEET_CONFIG.SHEETS.DEADLINES}!A:G`
    });
    
    const rows = response.data.values || [];
    if (rows.length < 2) return [];
    
    const deadlines = [];
    const today = new Date();
    const cutoffDate = new Date();
    cutoffDate.setDate(today.getDate() + daysAhead);
    
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      if (row[4] === 'Pending') { // Status column
        const dueDate = new Date(row[2]);
        if (dueDate <= cutoffDate) {
          deadlines.push({
            case_number: row[0],
            deadline_type: row[1],
            due_date: row[2],
            days_remaining: row[3],
            status: row[4]
          });
        }
      }
    }
    
    // Sort by due date
    deadlines.sort((a, b) => new Date(a.due_date) - new Date(b.due_date));
    
    return deadlines;
  } catch (error) {
    console.error('Error getting upcoming deadlines:', error);
    throw error;
  }
}

// Helper functions
function calculateDeadlines(deathDate) {
  const death = new Date(deathDate);
  
  // 60-day notice
  const sixtyDay = new Date(death);
  sixtyDay.setDate(sixtyDay.getDate() + 60);
  
  // 120-day contest period
  const contest = new Date(death);
  contest.setDate(contest.getDate() + 120);
  
  // 4-month creditor claims
  const creditor = new Date(death);
  creditor.setMonth(creditor.getMonth() + 4);
  
  // 9-month estate tax
  const estateTax = new Date(death);
  estateTax.setMonth(estateTax.getMonth() + 9);
  
  // Final income tax (April 15 of following year)
  const finalTax = new Date(death.getFullYear() + 1, 3, 15);
  
  return {
    sixty_day_notice: formatDate(sixtyDay),
    contest_deadline: formatDate(contest),
    creditor_claims: formatDate(creditor),
    estate_tax_706: formatDate(estateTax),
    final_income_tax: formatDate(finalTax)
  };
}

function formatDate(date) {
  if (!date) return '';
  const d = new Date(date);
  return `${(d.getMonth() + 1).toString().padStart(2, '0')}/${d.getDate().toString().padStart(2, '0')}/${d.getFullYear()}`;
}

function calculateDaysRemaining(dateString) {
  if (!dateString) return '';
  const today = new Date();
  const deadline = new Date(dateString);
  const diffTime = deadline - today;
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays.toString();
}

// Main handler
exports.handler = async (event, context) => {
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, OPTIONS'
      },
      body: ''
    };
  }
  
  const path = event.path.replace('/.netlify/functions/google-sheets-integration', '');
  const method = event.httpMethod;
  
  try {
    let response = {};
    
    switch (path) {
      case '/create-case':
        if (method === 'POST') {
          const caseData = JSON.parse(event.body);
          response = await createCaseInSheets(caseData);
        }
        break;
        
      case '/update-status':
        if (method === 'PUT') {
          const { case_number, status, notes } = JSON.parse(event.body);
          response = await updateCaseStatus(case_number, status, notes);
        }
        break;
        
      case '/record-document':
        if (method === 'POST') {
          const { case_number, document_type, drive_link } = JSON.parse(event.body);
          response = await recordDocumentGeneration(case_number, document_type, drive_link);
        }
        break;
        
      case '/get-case':
        if (method === 'GET') {
          const caseNumber = event.queryStringParameters.case_number;
          response = await getCaseData(caseNumber);
        }
        break;
        
      case '/active-cases':
        if (method === 'GET') {
          response = await getActiveCases();
        }
        break;
        
      case '/upcoming-deadlines':
        if (method === 'GET') {
          const days = event.queryStringParameters.days || 30;
          response = await getUpcomingDeadlines(parseInt(days));
        }
        break;
        
      default:
        return {
          statusCode: 404,
          body: JSON.stringify({ error: 'Endpoint not found' })
        };
    }
    
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify(response)
    };
    
  } catch (error) {
    console.error('Google Sheets API error:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        error: 'Failed to process request',
        details: error.message
      })
    };
  }
};
